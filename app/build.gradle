plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.android.extensions'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.secrets_gradle_plugin' version '0.4'
}

def versionMajor = 1
def versionMinor = 0
def versionPatch = 7
def versionBuild = 7 // Bump for dogfood builds, public betas, etc.

android {
    compileSdk 31

    useLibrary('android.test.runner')
    useLibrary('android.test.base')
    useLibrary('android.test.mock')

    defaultConfig {
        applicationId 'com.petestmart.moviespotter'
        minSdk 21
        targetSdk 31

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding = true
        compose true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    composeOptions {
        kotlinCompilerExtensionVersion "$compose_version"
        kotlinCompilerVersion "$kotlin_version"
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = '1.8'
        }
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    testOptions {
        unitTests.includeAndroidResources = true
    }

    bundle {
        density {
            // Different APKs are generated for devices with different screen densities; true by default.
            enableSplit true
        }
        abi {
            // Different APKs are generated for devices with different CPU architectures; true by default.
            enableSplit true
        }
        language {
            // This is disabled so that the App Bundle does NOT split the APK for each language.
            // We're going to use the same APK for all languages.
            enableSplit false
        }
    }
    dynamicFeatures = []
}

dependencies {
    // Activity Compose
    def activity_compose_version = '1.3.1'
    implementation "androidx.activity:activity-compose:$activity_compose_version"

    // androidx.activity
    def activity_version = '1.4.0'
    implementation "androidx.activity:activity-ktx:$activity_version"

    // androidx.constraintlayout
    def constraint_layout_version = '2.0.4'
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    // androidx.core-ktx
    def core_ktx = '1.6.0'
    implementation "androidx.core:core-ktx:$core_ktx"

    // androidx.fragment (defined in project gradle)
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    // androidx.test
    def androidx_test_version = '1.4.0'
    androidTestImplementation "androidx.test:runner:$androidx_test_version"
    androidTestImplementation "androidx.test:core:$androidx_test_version"
    androidTestImplementation "androidx.test:rules:$androidx_test_version"
    testImplementation "androidx.test:core:$androidx_test_version"

    // androidx.test junit-ktx
    def junit_ktx_version = '1.1.3'
    androidTestImplementation "androidx.test.ext:junit-ktx:$junit_ktx_version"

    // androidx.ui foundation
    def ui_foundation_version = '0.1.0-dev03'
    implementation "androidx.ui:ui-foundation:$ui_foundation_version"

    // app compat
    def app_compat_version = '1.3.1'
    implementation "androidx.appcompat:appcompat:$app_compat_version"

    // coil
    def coil_version = '1.3.1'
    implementation "io.coil-kt:coil-compose:$coil_version"

    // Compose Test (defined in project gradle)
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    // Compose (defined in project gradle)
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"

    // Constraint Layout (has different versioning than Jetpack Compose)
    def constraintlayout_compose_version = '1.0.0-beta02'
    implementation "androidx.constraintlayout:constraintlayout-compose:$constraintlayout_compose_version"

    // Espresso
    def espresso_version = '3.4.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"

    // Firebase & Firebase Libraries
    def firebase_bom_version = '29.0.0'
    implementation platform("com.google.firebase:firebase-bom:$firebase_bom_version")

    // Firebase Libraries (do not require version)
    implementation 'com.google.firebase:firebase-analytics-ktx'
//    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    // Google Truth
    def truth_version = '1.1.2'
    testImplementation "com.google.truth:truth:$truth_version"

    // gson
    def gson_version = '2.8.5'
    implementation "com.google.code.gson:gson:$gson_version"

    // Glide
    def glide_version = '4.11.0'
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    // Hilt (defined in project gradle)
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // Hilt Lifecycle Viewmodel
    def hilt_lifecycle_viewmodel_version = '1.0.0-alpha03'
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_lifecycle_viewmodel_version"

    // Hilt Navigation (Different Version than Hilt)
    def hilt_navigation_version = '1.0.0-alpha03'
    implementation "androidx.hilt:hilt-navigation-fragment:$hilt_navigation_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_navigation_version"
    implementation "androidx.hilt:hilt-work:$hilt_navigation_version"

    // junit
    def junit_version = '4.13'
    testImplementation "junit:junit:$junit_version"

    // junit test extension
    def junit_ext_version = '1.1.3'
    androidTestImplementation "androidx.test.ext:junit:$junit_ext_version"

    // Lifecycle (defined in project gradle)
    def lifecycle_version = "2.4.0"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Lifecycle Extensions
    def lifecycle_extensions_version = '2.2.0-rc03'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extensions_version"

    // Navigation
    def nav_version = '2.3.5'
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Navigation Compose
    def nav_compose_version = '2.4.0-beta02'
    implementation "androidx.navigation:navigation-compose:$nav_compose_version"

    // Material
    def material_version = '1.4.0'
    implementation "com.google.android.material:material:$material_version"

    // mockito
    def mockito_version = '1.10.19'
    testImplementation "org.mockito:mockito-core:$mockito_version"

    // mockwebserver
    def mockwebserver_version = '4.9.2'
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserver_version"

    // okhttp
    def okhttp_version = '4.3.1'
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"

    // okhttp3-idling-resource
    def idling_resource_version = '1.0.0'
    androidTestImplementation "com.jakewharton.espresso:okhttp3-idling-resource:$idling_resource_version"

    // okio
    def okio_version = '1.6.0'
    implementation "com.squareup.okio:okio:$okio_version"

    // Play Core Library
    def playcore_version = '1.7.2'
    implementation "com.google.android.play:core:$playcore_version"

    // Retrofit
    def retrofit_version = '2.7.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // Room
    def room_version = '2.3.0'
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // runtime required to avoid crash on Android 12 API 31
    def runtime_ktx_version = '2.7.0'
    implementation "androidx.work:work-runtime-ktx:$runtime_ktx_version"
}